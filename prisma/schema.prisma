generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(cuid())
  email                   String         @unique
  passwordHash            String?
  name                    String
  profileImageUrl         String?
  userType                UserType
  status                  UserStatus     @default(PENDING)
  oauthProvider           String?
  oauthId                 String?
  emailVerified           Boolean        @default(false)
  verificationToken       String?
  referralSource          String?
  termsAcceptedAt         DateTime?
  privacyPolicyAcceptedAt DateTime?
  lastLogin               DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  accounts                Account[]
  adminActions            AdminAction[]
  artist                  Artist?
  fan                     Fan?
  host                    Host?
  sentMessages            Message[]
  notifications           Notification[]
  payments                Payment[]
  reviewsReceived         Review[]       @relation("RevieweeUser")
  reviews                 Review[]       @relation("ReviewerUser")
  sessions                Session[]
  profile                 UserProfile?

  @@map("users")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  location        String?
  phone           String?
  websiteUrl      String?
  socialLinks     Json?
  preferences     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  profileImageUrl String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Artist {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  stageName               String?
  genres                  String[]
  typicalSetLength        Int?
  equipmentNeeds          String[]
  travelRadius            Int?
  pressPhotoUrl           String?
  performanceVideoUrl     String?
  performanceVideoFile    String?       // File path for uploaded MP4 video
  musicSamples            Json?
  minGuarantee            Int?
  preferredBookingAdvance Int?
  applicationSubmittedAt  DateTime?
  approvedAt              DateTime?
  approvedByUserId        String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  tourMonthsPerYear       Int?
  tourVehicle             String?
  venueRequirements       String[]
  willingToTravel         Int?
  videoLinks              Json?
  needsLodging            Boolean       @default(false)
  media                   ArtistMedia[]
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bandMembers             BandMember[]
  bookings                Booking[]

  @@map("artists")
}

model ArtistMedia {
  id          String    @id @default(cuid())
  artistId    String
  mediaType   MediaType
  category    String?
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  title       String?
  description String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("artist_media")
}

model BandMember {
  id         String   @id @default(cuid())
  artistId   String
  name       String
  instrument String?
  role       String?
  photoUrl   String?
  bio        String?
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("band_members")
}

model Host {
  id                     String      @id @default(cuid())
  userId                 String      @unique
  venueName              String?
  venueType              VenueType
  city                   String
  state                  String
  country                String      @default("USA")
  displayCoordinates     String?
  actualAddress          String?
  indoorCapacity         Int?
  outdoorCapacity        Int?
  preferredGenres        String[]
  hostingExperience      Int?
  typicalShowLength      Int?
  houseRules             String?
  offersLodging          Boolean     @default(false)
  lodgingDetails         Json?
  suggestedDoorFee       Int?
  applicationSubmittedAt DateTime?
  approvedAt             DateTime?
  approvedByUserId       String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  venueDescription       String?
  venuePhotoUrl          String?
  amenities              String[]
  soundSystem            Json?
  bookings               Booking[]
  media                  HostMedia[]
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("hosts")
}

model HostMedia {
  id          String    @id @default(cuid())
  hostId      String
  mediaType   MediaType
  category    String?
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  title       String?
  description String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  host        Host      @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("host_media")
}

model Fan {
  id                    String             @id @default(cuid())
  userId                String             @unique
  favoriteGenres        String[]
  travelRadius          Int?
  subscriptionStatus    SubscriptionStatus
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  rsvps                 FanRSVP[]
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fans")
}

model Booking {
  id                 String         @id @default(cuid())
  artistId           String
  hostId             String
  requestedDate      DateTime
  requestedTime      DateTime?
  estimatedDuration  Int?
  expectedAttendance Int?
  status             BookingStatus  @default(PENDING)
  artistFee          Int?
  doorFee            Int?
  artistMessage      String?
  hostResponse       String?
  lodgingRequested   Boolean        @default(false)
  lodgingDetails     Json?
  requestedAt        DateTime       @default(now())
  respondedAt        DateTime?
  confirmedAt        DateTime?
  completedAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  artist             Artist         @relation(fields: [artistId], references: [id])
  host               Host           @relation(fields: [hostId], references: [id])
  concert            Concert?
  conversations      Conversation[]
  payments           Payment[]
  reviews            Review[]

  @@map("bookings")
}

model Concert {
  id                      String        @id @default(cuid())
  bookingId               String        @unique
  title                   String?
  description             String?
  date                    DateTime
  startTime               DateTime
  endTime                 DateTime?
  maxCapacity             Int
  doorFee                 Int?
  advanceTicketsAvailable Boolean       @default(false)
  status                  ConcertStatus @default(SCHEDULED)
  isPrivate               Boolean       @default(false)
  requiresApproval        Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  booking                 Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  rsvps                   FanRSVP[]

  @@map("concerts")
}

model FanRSVP {
  id              String     @id @default(cuid())
  fanId           String
  concertId       String
  status          RSVPStatus @default(PENDING)
  guestsCount     Int        @default(1)
  specialRequests String?
  rsvpDate        DateTime   @default(now())
  statusUpdatedAt DateTime   @default(now())
  concert         Concert    @relation(fields: [concertId], references: [id])
  fan             Fan        @relation(fields: [fanId], references: [id])

  @@unique([fanId, concertId])
  @@map("fan_rsvps")
}

model Review {
  id           String    @id @default(cuid())
  bookingId    String
  reviewerId   String
  revieweeId   String
  rating       Int
  reviewText   String?
  isPublic     Boolean   @default(true)
  responseText String?
  responseDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id])
  reviewee     User      @relation("RevieweeUser", fields: [revieweeId], references: [id])
  reviewer     User      @relation("ReviewerUser", fields: [reviewerId], references: [id])

  @@unique([bookingId, reviewerId])
  @@map("reviews")
}

model Payment {
  id                    String        @id @default(cuid())
  stripePaymentIntentId String?
  amount                Int
  currency              String        @default("USD")
  userId                String
  bookingId             String?
  paymentType           PaymentType
  status                PaymentStatus @default(PENDING)
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  booking               Booking?      @relation(fields: [bookingId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Conversation {
  id             String    @id @default(cuid())
  bookingId      String?
  participantIds String[]
  subject        String?
  lastMessageAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  booking        Booking?  @relation(fields: [bookingId], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType  @default(TEXT)
  readBy         String[]
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String?
  relatedId   String?
  relatedType String?
  isRead      Boolean          @default(false)
  readAt      DateTime?
  actionUrl   String?
  actionText  String?
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AdminAction {
  id         String          @id @default(cuid())
  adminId    String
  actionType AdminActionType
  targetId   String
  targetType String
  reason     String?
  notes      String?
  createdAt  DateTime        @default(now())
  admin      User            @relation(fields: [adminId], references: [id])

  @@map("admin_actions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserType {
  ARTIST
  HOST
  FAN
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  ACTIVE
  SUSPENDED
  REJECTED
  PAYMENT_EXPIRED
}

enum VenueType {
  HOME
  LOFT
  WAREHOUSE
  OTHER
  STUDIO
  BACKYARD
}

enum MediaType {
  PHOTO
  VIDEO
  AUDIO
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ConcertStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum RSVPStatus {
  PENDING
  APPROVED
  DECLINED
  WAITLISTED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentType {
  MEMBERSHIP
  BOOKING
  DOOR_FEE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  SYSTEM
  BOOKING_UPDATE
}

enum NotificationType {
  BOOKING
  MESSAGE
  PAYMENT
  SYSTEM
}

enum AdminActionType {
  APPROVE_USER
  REJECT_USER
  SUSPEND_USER
  APPROVE_BOOKING
}
